This file contains notes on how to collect a new set of Daikon measurements.

!UNFINISHED!

If you already have a Pascali test directory, you may skip to section B.


A. Setting up the Pascali test environment.

The first step is to create a skeleton test directory by cloning the integration-test2
repository.  The example commands in this document assume this directory is named "testcase".

git clone https://github.com/aas-integration/integration-test2.git testcase

Read through testcase/README.md to get a general idea of what needs to be done.  For Daikon
data collection you do not need to do all the steps, the details are below; however, you
need to need to ensure your system meets the requirements listed in the "Dependencies and
Requirements" section.

PROBLEMS: The fetchdependancies.sh script does not setup diakon corectly.  I had never
noticed as I always reset the appropriate enviornment variables to point to my local
copy of daikon.  I have partially debugged, but needs more work.


B. Setting up the Daikon data collection tools.

Setup a standard corpus testcase directory and then copy the three files listed below
into that directory. 

To run with DynComp you will need to have a diakon enlistment and have set the
usual envrionment variables to point there.  If you have local changes to 
the daikon tool set that you wish to test, you will need to copy your daikon.jar
to the testcase/lib directory.

To run the test process cd to the testcase directory and run:

  bash -v ./collect-inv-numbers.sh 2>&1 | tee results.log

To run entire collect-inv-numbers script on eel takes about 3.5 hours.


collect-inv-numbers.sh
count-inv.pl
runone.py

runone.py is a sightly modified version of run_dyntrace that uses the 'dyntracecounts'
tool to run daikon twice: first normally and the with ??? config option to collect
the total number of possible invariants.

count-inv.pl is a perl script that processes the individual log files generated by
collect-inv-numbers and displays the invariant counts.
