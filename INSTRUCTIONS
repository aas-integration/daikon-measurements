This file contains notes on how to collect a new set of Daikon measurements.

If you already have a Pascali test directory, you may skip to section B.


A. Setting up the Pascali test environment.

The first step is to create a skeleton test directory by cloning the integration-test2
repository.  The example commands in this document assume this directory is named "testcase".

  git clone https://github.com/aas-integration/integration-test2.git testcase

Read through testcase/README.md to get a general idea of what needs to be done.
For Daikon data collection you do not need to do all the steps, the details are
below; however, you need to ensure your system meets the requirements listed in
the "Dependencies and Requirements" section.

Set the JAVA_HOME environment variable - it should point to your Java 8 JDK.  Example:
  export JAVA_HOME=/homes/gws/markro/jdk8

Now you are ready to setup the test directory:
  cd testcase
  python fetch.py
This will run for quite a while setting up test directories and then loading and
compiling Daikon.

Now finish setting up your environment:
  export DAIKONDIR=`pwd`/tools/daikon-src
  source $DAIKONDIR/scripts/daikon.bashrc
The latter script is primarily to get CLASSPATH set correctly.


B. Setting up the Daikon data collection tools.

Copy the three files listed in section (C) into your test directory.

NOTE: Changes were made to the Pascali repositories on 4/6/2017 that required
changes to these tools.  You must run with a version of the Pascali repos
post this date.

If you wish to collect the numbers using a different version of Daikon,
perhaps one with local changes, you must set the DAIKONDIR environment
variable to that location.  In addition, you will need to copy your
daikon.jar to the testcase/lib directory.

NOTE: The Corpus tools now allow one to
just set DAIKONDIR and not have to copy daikon.jar.

IMPORTANT:
The consistency of the results depends on randoop generating consistent
test cases.  This can vary depending on the test machine load.  Therefore,
it is important that the test suite is the only task running on your
test machine.

ALSO IMPORTANT:
Try to run the suite on a system that does NOT have XTERM/X11 enabled.
Otherwise, some test cases hang waiting for dialog boxes to close.

To run the test process cd to the testcase directory and run:

  ./collect-inv-numbers.sh 2>&1 | tee results.log

To run entire collect-inv-numbers script on eel takes about 5 hours.


C. Notes on tools/scripts

collect-inv-numbers.sh
count-inv.pl
runone.py

runone.py is a sightly modified version of run_dyntrace that uses the
'dyntracecounts' tool to run daikon twice: first normally and then with
the config_option daikon.Daikon.calc_possible_invs=true to collect the
total number of possible invariants.

count-inv.pl is a perl script that processes the individual log files
generated by collect-inv-numbers and displays the invariant counts.
